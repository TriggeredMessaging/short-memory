{"ts":1351195193307,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"class ShortMemory\n  heap = []\n  memorable = require './memorable.js'\n  MaxSize: 0\n  MaxRecords: 0\n  MaxAge: 0\n  \n  Size: ()->\n    clearFuncs = []\n    stack = [heap]\n    bytes = 0\n    func = null\n    isChecked = (item)->\n      item[\"__c\"] || false;\n    check = (item)->\n      item[\"__c\"] = true;\n    uncheck = (item)->\n      delete item[\"__c\"]\n    while(stack.length)\n      value = stack.pop()\n      do(value)->\n        if typeof value is 'string'\n          bytes += value.length * 2\n        else if typeof value is 'boolean'\n          bytes += 4\n        else if typeof value is 'number'\n          bytes += 8\n        else if typeof value is 'object' and not isChecked value\n          clearFuncs.push ->\n            uncheck value\n          for i,val of value\n            if value.hasOwnProperty i\n              stack.push val\n          check value\n    while func = clearFuncs.pop()\n      func.call()\n    return bytes\n\nmodule.exports = ShortMemory"]],"start1":0,"start2":0,"length1":0,"length2":944}]],"length":944}
{"contributors":[],"silentsave":false,"ts":1351195603711,"patch":[[{"diffs":[[0,"heap"],[-1," ="],[1,":"],[0," []\n  "],[-1,"m"],[1,"M"],[0,"emorable"],[-1," ="],[1,":"],[0," req"]],"start1":20,"start2":20,"length1":27,"length2":25},{"diffs":[[0,"e: 0\n  \n"],[1,"  constructor = (options)->\n    options?= {}\n    options.maxSize?= 0\n    options.maxRecords?= 0\n    options.maxAge?= 0\n    \n    @MaxSize = maxSize\n    @MaxRecords = maxRecords\n    @MaxAge = maxAge\n  \n"],[0,"  Size: "]],"start1":103,"start2":103,"length1":16,"length2":216}]],"length":1142,"saved":false}
{"ts":1351196477706,"patch":[[{"diffs":[[0,"\n  S"],[-1,"ize: ()->\n    clearFuncs = []\n    stack = [heap]\n    bytes = 0\n    func = null\n    isChecked = (item"],[1,"et: (key, data, options"],[0,")->\n    "],[-1," "],[-1," item[\"__c\"] || false;\n    check = (item)->\n      item[\"__c\"] = true;\n    uncheck = (item)->\n      delete item[\"__c\"]\n    while(stack.length)\n      value = stack.pop()\n      do(value)->\n        if typeof value is 'string'\n          bytes += value.length * 2\n        else if typeof value is 'boolean'\n          bytes += 4\n        else if typeof value is 'number'\n          bytes += 8\n        else if typeof value is 'object' and not isChecked value\n          clearFuncs.push ->\n            uncheck value\n          for i,val of value\n            if value.hasOwnProperty i\n              stack.push val\n          check value\n    while func = clearFuncs.pop()\n      func.call()"],[1,"try memorable = new Memorable(key, data, options)\n    catch (ex)\n      console.error \"Unable to set memorable: #{ex}\"\n  \n  CalculateSize: ->\n    size = 0\n    for memorable in @heap\n      size += memorable.Size"],[0,"\n   "]],"start1":310,"start2":310,"length1":789,"length2":248},{"diffs":[[0,"urn "],[-1,"bytes"],[1,"size\n    "],[0,"\n\nmo"]],"start1":562,"start2":562,"length1":13,"length2":17}]],"length":605,"saved":false}
{"ts":1351196488173,"patch":[[{"diffs":[[0,"tch "],[-1,"("],[0,"ex"],[-1,")"],[0,"\n   "]],"start1":401,"start2":401,"length1":12,"length2":10}]],"length":603,"saved":false}
{"ts":1351196532469,"patch":[[{"diffs":[[0,"    try "],[1,"\n      "],[0,"memorabl"]],"start1":341,"start2":341,"length1":16,"length2":23},{"diffs":[[0,"emorable"],[-1,"("],[1," "],[0,"key, dat"]],"start1":373,"start2":373,"length1":17,"length2":17},{"diffs":[[0," options"],[-1,")"],[1,"\n      heap.push memorable"],[0,"\n    cat"]],"start1":392,"start2":392,"length1":17,"length2":42}]],"length":635,"saved":false}
{"ts":1351196710195,"patch":[[{"diffs":[[0,"ata, options"],[1,", callback"],[0,")->\n    try "]],"start1":325,"start2":325,"length1":24,"length2":34},{"diffs":[[0,"ex}\"\n  \n"],[1,"  Get: (key, callback)->\n  \n  \n"],[0,"  Calcul"]],"start1":498,"start2":498,"length1":16,"length2":47}]],"length":676,"saved":false}
{"ts":1351196888832,"patch":[[{"diffs":[[0," \n  "],[-1,"Get: (key, call"],[1,"# Returns error:empty if there is no valid entry\n  Get: (key, callback)->\n  \n  # Performs elseback to get data if empty\n  GetOrElse: (key, options, callback, else"],[0,"back"]],"start1":504,"start2":504,"length1":23,"length2":170}]],"length":823,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351204795543,"patch":[[{"diffs":[[0,"ap: "],[-1,"[]"],[1,"{}"],[0,"\n  M"]],"start1":22,"start2":22,"length1":10,"length2":10},{"diffs":[[0,".maxAge?= 0\n"],[1,"    options.debug?= false\n"],[0,"    \n    @Ma"]],"start1":218,"start2":218,"length1":24,"length2":50},{"diffs":[[0,"heap"],[-1,".push"],[1,"[key] ="],[0," mem"]],"start1":443,"start2":443,"length1":13,"length2":15},{"diffs":[[0,"s error:"],[-1,"empty"],[1,"notfound"],[0," if ther"]],"start1":544,"start2":544,"length1":21,"length2":24},{"diffs":[[0,"callback)->\n"],[1,"    value = @heap[key]\n    if typeof value is 'undefined'\n      callback\n        type: \"notfound\"\n        message: \"Key #{key} not found in heap.\"\n    else\n      if value.IsExpired() || value.Invalid\n        @Destroy key\n        callback\n          type: \"invalid\"\n          message: \"Key #{key} is invalid or expired.\"\n      else\n        callback null, heap[key]\n"],[0,"  \n  # Perfo"]],"start1":601,"start2":601,"length1":24,"length2":387},{"diffs":[[0,"erforms "],[-1,"el"],[0,"se"],[1,"t"],[0,"back to "]],"start1":984,"start2":984,"length1":20,"length2":19},{"diffs":[[0,"etOr"],[-1,"Else"],[1,"Set"],[0,": (k"]],"start1":1024,"start2":1024,"length1":12,"length2":11},{"diffs":[[0,"llback, "],[-1,"el"],[0,"se"],[1,"t"],[0,"back)->\n"]],"start1":1050,"start2":1050,"length1":20,"length2":19}]],"length":1214,"saved":false}
{"ts":1351204808081,"patch":[[{"diffs":[[0,"if empty"],[1," or invalid"],[0,"\n  GetOr"]],"start1":1012,"start2":1012,"length1":16,"length2":27}]],"length":1225,"saved":false}
{"ts":1351209149101,"patch":[[{"diffs":[[0,"e.js'\n  "],[-1,"M"],[1,"m"],[0,"axSize: "]],"start1":61,"start2":61,"length1":17,"length2":17},{"diffs":[[0,"ze: 0\n  "],[-1,"M"],[1,"m"],[0,"axRecord"]],"start1":74,"start2":74,"length1":17,"length2":17},{"diffs":[[0,"ds: 0\n  "],[-1,"M"],[1,"m"],[0,"axAge: 0"]],"start1":90,"start2":90,"length1":17,"length2":17},{"diffs":[[0,"xAge: 0\n"],[1,"  debug: false\n"],[0,"  \n  con"]],"start1":100,"start2":100,"length1":16,"length2":31},{"diffs":[[0,"  \n    @"],[-1,"M"],[1,"m"],[0,"axSize ="]],"start1":273,"start2":273,"length1":17,"length2":17},{"diffs":[[0,"xSize = "],[1,"options."],[0,"maxSize\n"]],"start1":283,"start2":283,"length1":16,"length2":24},{"diffs":[[0,"ze\n    @"],[-1,"M"],[1,"m"],[0,"axRecord"]],"start1":304,"start2":304,"length1":17,"length2":17},{"diffs":[[0,"cords = "],[1,"options."],[0,"maxRecor"]],"start1":317,"start2":317,"length1":16,"length2":24},{"diffs":[[0,"   @"],[-1,"M"],[1,"m"],[0,"axAge = "],[1,"options."],[0,"maxA"]],"start1":345,"start2":345,"length1":17,"length2":25},{"diffs":[[0,"e\n  "],[-1,"\n  S"],[1,"  @debug = options.debug\n  \n  s"],[0,"et: "]],"start1":371,"start2":371,"length1":12,"length2":39},{"diffs":[[0,"morable\n"],[1,"      callback\n"],[0,"    catc"]],"start1":523,"start2":523,"length1":16,"length2":31},{"diffs":[[0,"entry\n  "],[-1,"G"],[1,"g"],[0,"et: (key"]],"start1":663,"start2":663,"length1":17,"length2":17},{"diffs":[[0,"    "],[-1,"@D"],[1,"\n        @d"],[0,"estr"]],"start1":898,"start2":898,"length1":10,"length2":19},{"diffs":[[0,"k null, "],[-1,"heap[key]"],[1,"value"],[0,"\n  \n  # "]],"start1":1048,"start2":1048,"length1":25,"length2":21},{"diffs":[[0,"d\n  "],[-1,"G"],[1,"# Ultimately, callback gets called with end data\n  g"],[0,"etOr"]],"start1":1116,"start2":1116,"length1":9,"length2":60},{"diffs":[[0,"ck)->\n  "],[1,"  "],[0,"\n  \n  Ca"]],"start1":1211,"start2":1211,"length1":16,"length2":18}]],"length":1364,"saved":false}
{"ts":1351209569913,"patch":[[{"diffs":[[0,"callback)->\n"],[1,"    process.nextTick ->\n  "],[0,"    value = "]],"start1":682,"start2":682,"length1":24,"length2":50},{"diffs":[[0,"ey]\n    "],[1,"  "],[0,"if typeo"]],"start1":739,"start2":739,"length1":16,"length2":18},{"diffs":[[0,"efined'\n"],[1,"  "],[0,"      ca"]],"start1":772,"start2":772,"length1":16,"length2":18},{"diffs":[[0,"ack\n        "],[1,"  "],[0,"type: \"notfo"]],"start1":793,"start2":793,"length1":24,"length2":26},{"diffs":[[0,"tfound\"\n        "],[1," "],[1," "],[0,"message: \"Key #{"]],"start1":816,"start2":816,"length1":32,"length2":34},{"diffs":[[0," heap.\"\n"],[1,"  "],[0,"    else"]],"start1":867,"start2":867,"length1":16,"length2":18},{"diffs":[[0,"e\n      "],[1,"  "],[0,"if value"]],"start1":884,"start2":884,"length1":16,"length2":18},{"diffs":[[0,"lid\n        "],[1," "],[-1,"\n"],[1," \n  "],[0,"        @des"]],"start1":928,"start2":928,"length1":25,"length2":29},{"diffs":[[0,"roy key\n        "],[1,"  "],[0,"callback\n       "]],"start1":958,"start2":958,"length1":32,"length2":34},{"diffs":[[0,"       callback\n"],[1,"  "],[0,"          type: "]],"start1":969,"start2":969,"length1":32,"length2":34},{"diffs":[[0,"alid\"\n          "],[1,"  "],[0,"message: \"Key #{"]],"start1":1007,"start2":1007,"length1":32,"length2":34},{"diffs":[[0,"expired.\"\n      "],[1,"  "],[0,"else\n"],[1,"  "],[0,"        callback"]],"start1":1060,"start2":1060,"length1":37,"length2":41},{"diffs":[[0,"allback, set"],[-1,""],[0,""],[1,"back)->\n    \n  destroy: (key, call"],[0,"back)->\n    "]],"start1":1249,"start2":1249,"length1":24,"length2":58}]],"length":1450,"saved":false}
{"ts":1351211873615,"patch":[[{"diffs":[[0,")->\n    "],[1,"callback(delete @heap[key])"],[0,"\n  \n  Ca"]],"start1":1299,"start2":1299,"length1":16,"length2":43},{"diffs":[[0,"    for "],[1,"i,"],[0,"memorabl"]],"start1":1371,"start2":1371,"length1":16,"length2":18}]],"length":1479,"saved":false}
{"ts":1351211895945,"patch":[[{"diffs":[[0,"for "],[-1,"i,"],[0,"memo"]],"start1":1375,"start2":1375,"length1":10,"length2":8}]],"length":1477,"saved":false}
{"ts":1351211915986,"patch":[[{"diffs":[[0,"\n    for"],[1," i,"],[0," memorab"]],"start1":1370,"start2":1370,"length1":16,"length2":19}]],"length":1480,"saved":false}
{"ts":1351211965427,"patch":[[{"diffs":[[0,"morable "],[-1,"in"],[1,"of"],[0," @heap\n "]],"start1":1384,"start2":1384,"length1":18,"length2":18}]],"length":1480,"saved":false}
{"ts":1351213709351,"patch":[[{"diffs":[[0,"lid\n"],[-1,"          \n"],[0,"    "]],"start1":928,"start2":928,"length1":19,"length2":8},{"diffs":[[0,"roy key\n"],[1,""],[0,"        "]],"start1":947,"start2":947,"length1":16,"length2":16},{"diffs":[[0," \n  "],[-1,"C"],[1,"prune: ->\n    if @maxCount isnt 0\n      count = Object.keys(@heap).length\n      if count > @maxCount\n        overCount = count - @maxCount\n        prunable = Object.keys(@heap).slice(0, overCount)\n        for i, key in prunable\n          @destroy key\n    if @maxSize isnt 0\n      size = @calculateSize()\n      if size > @maxSize\n        overSize = size - @maxSize\n          for i, memorable of @heap\n            ''\n        \n  \n  c"],[0,"alcu"]],"start1":1325,"start2":1325,"length1":9,"length2":438}]],"length":1898,"saved":false}
{"ts":1351213729621,"patch":[[{"diffs":[[0,"ize\n        "],[-1,"  "],[0,"for i, memor"]],"start1":1689,"start2":1689,"length1":26,"length2":24},{"diffs":[[0,"le of @heap\n"],[-1,"  "],[0,"          ''"]],"start1":1715,"start2":1715,"length1":26,"length2":24}]],"length":1894,"saved":false}
{"ts":1351213937841,"patch":[[{"diffs":[[0,"     for"],[-1," i,"],[0," key in "]],"start1":1529,"start2":1529,"length1":19,"length2":16}]],"length":1891,"saved":false}
{"ts":1351213960979,"patch":[[{"diffs":[[0,"     for"],[1," i,"],[0," key in "]],"start1":1529,"start2":1529,"length1":16,"length2":19}]],"length":1894,"saved":false}
{"ts":1351214335656,"patch":[[{"diffs":[[0,"xAge: 0\n"],[1,"  pruneTime: 5\n"],[0,"  debug:"]],"start1":100,"start2":100,"length1":16,"length2":31},{"diffs":[[0,": false\n"],[-1,""],[0,"  \n  con"]],"start1":130,"start2":130,"length1":16,"length2":16},{"diffs":[[0,".maxAge?= 0\n"],[1,"    options.pruneTime?= 5\n"],[0,"    options."]],"start1":248,"start2":248,"length1":24,"length2":50},{"diffs":[[0,".maxAge\n"],[-1,""],[0,"    @deb"]],"start1":406,"start2":406,"length1":16,"length2":16},{"diffs":[[0,"s.debug\n"],[1,"    @pruneTime = options.pruneTime\n    \n    do->\n      setTimeout(\n        ->\n          @prune\n        @pruneTime * 1000\n      )\n    \n"],[0,"  \n  set"]],"start1":433,"start2":433,"length1":16,"length2":150}]],"length":2069,"saved":false}
{"ts":1351214366931,"patch":[[{"diffs":[[0,"runeTime"],[1," * 1000"],[0,"\n    \n  "]],"start1":467,"start2":467,"length1":16,"length2":23},{"diffs":[[0,"  @pruneTime"],[-1," * 1000"],[0,"\n      )\n   "]],"start1":549,"start2":549,"length1":31,"length2":24}]],"length":2069,"saved":false}
{"ts":1351214682106,"patch":[[{"diffs":[[0,"size - @maxSize\n"],[1,"        prunable = []\n"],[0,"        for i, m"]],"start1":1852,"start2":1852,"length1":32,"length2":54},{"diffs":[[0," []\n        for "],[-1,"i"],[1,"key"],[0,", memorable of @"]],"start1":1886,"start2":1886,"length1":33,"length2":35},{"diffs":[[0,"    "],[-1,"''"],[1,"prunable.push key\n          overSize -="],[0,"\n   "]],"start1":1932,"start2":1932,"length1":10,"length2":47}]],"length":2130,"saved":false}
{"ts":1351214729797,"patch":[[{"diffs":[[0,"rSize -="],[1," memorable.size\n          if overSize <= 0 then break\n        for i, key in prunable\n          @destroy key"],[0,"\n       "]],"start1":1967,"start2":1967,"length1":16,"length2":123}]],"length":2237,"saved":false}
{"ts":1351214945439,"patch":[[{"diffs":[[0,"  prune: ->\n"],[1,"    # Destroy invalid/expired keys first\n    for key, memorable of @heap\n      if not memorable.isGood\n        prunable.push key\n    for i, key in prunable\n        @destroy key\n    # Destroy overcount\n"],[0,"    if @maxC"]],"start1":1502,"start2":1502,"length1":24,"length2":225},{"diffs":[[0,"destroy key\n"],[1,"    # Destroy oversize\n"],[0,"    if @maxS"]],"start1":1944,"start2":1944,"length1":24,"length2":47}]],"length":2461,"saved":false}
{"ts":1351215231024,"patch":[[{"diffs":[[0,"    "],[-1,"setTimeout(\n        ->\n          @prune\n        @pruneTime\n      )"],[1,"@prune"],[0,"\n   "]],"start1":499,"start2":499,"length1":74,"length2":14},{"diffs":[[0,"  prune: ->\n"],[1,"    clearTimeout @timer\n"],[0,"    # Destro"]],"start1":1442,"start2":1442,"length1":24,"length2":48},{"diffs":[[0,"key\n    "],[-1,"    "],[1,"@timer = setTimeout(\n      ->\n        @prune\n      @pruneTime\n    )"],[0,"\n  \n  ca"]],"start1":2267,"start2":2267,"length1":20,"length2":83}]],"length":2488,"saved":false}
{"ts":1351215323192,"patch":[[{"diffs":[[0," setback)->\n"],[1,"    @get key, (error, value)->\n      if error\n        if error.type is \"notfound\" or \"invalid\"\n"],[0,"    \n  destr"]],"start1":1361,"start2":1361,"length1":24,"length2":119}]],"length":2583,"saved":false}
{"ts":1351215327793,"patch":[[{"diffs":[[0,"r \"invalid\"\n"],[1,"          \n"],[0,"    \n  destr"]],"start1":1456,"start2":1456,"length1":24,"length2":35}]],"length":2594,"saved":false}
{"ts":1351215336980,"patch":[[{"diffs":[[0,"\"\n          "],[1,"\"set\""],[0,"\n    \n  dest"]],"start1":1466,"start2":1466,"length1":24,"length2":29}]],"length":2599,"saved":false}
{"ts":1351215357570,"patch":[[{"diffs":[[0,"und\" or "],[1,"error.type is "],[0,"\"invalid"]],"start1":1450,"start2":1450,"length1":16,"length2":30}]],"length":2613,"saved":false}
{"ts":1351215491272,"patch":[[{"diffs":[[0,"    callback"],[1," null, memorable.data"],[0,"\n    catch e"]],"start1":648,"start2":648,"length1":24,"length2":45},{"diffs":[[0," #{ex}\"\n"],[1,"      callback ex\n"],[0,"  \n  # R"]],"start1":740,"start2":740,"length1":16,"length2":34},{"diffs":[[0,"    "],[-1,"\"set\""],[1,"process.nextTick ->\n            data = setback()\n            @set key, data, options, callback"],[0,"\n   "]],"start1":1527,"start2":1527,"length1":13,"length2":102}]],"length":2741,"saved":false}
{"ts":1351215592004,"patch":[[{"diffs":[[0,"l, value"],[1,".data"],[0,"\n  \n  # "]],"start1":1248,"start2":1248,"length1":16,"length2":21},{"diffs":[[0,"        "],[1,"return "],[0,"@set key"]],"start1":1589,"start2":1589,"length1":16,"length2":23},{"diffs":[[0,"s, callback\n"],[1,"        return error\n      else\n        return value\n"],[0,"    \n  destr"]],"start1":1626,"start2":1626,"length1":24,"length2":77}]],"length":2806,"saved":false}
