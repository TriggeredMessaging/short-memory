{"ts":1351195193307,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"class ShortMemory\n  heap = []\n  memorable = require './memorable.js'\n  MaxSize: 0\n  MaxRecords: 0\n  MaxAge: 0\n  \n  Size: ()->\n    clearFuncs = []\n    stack = [heap]\n    bytes = 0\n    func = null\n    isChecked = (item)->\n      item[\"__c\"] || false;\n    check = (item)->\n      item[\"__c\"] = true;\n    uncheck = (item)->\n      delete item[\"__c\"]\n    while(stack.length)\n      value = stack.pop()\n      do(value)->\n        if typeof value is 'string'\n          bytes += value.length * 2\n        else if typeof value is 'boolean'\n          bytes += 4\n        else if typeof value is 'number'\n          bytes += 8\n        else if typeof value is 'object' and not isChecked value\n          clearFuncs.push ->\n            uncheck value\n          for i,val of value\n            if value.hasOwnProperty i\n              stack.push val\n          check value\n    while func = clearFuncs.pop()\n      func.call()\n    return bytes\n\nmodule.exports = ShortMemory"]],"start1":0,"start2":0,"length1":0,"length2":944}]],"length":944}
{"contributors":[],"silentsave":false,"ts":1351195603711,"patch":[[{"diffs":[[0,"heap"],[-1," ="],[1,":"],[0," []\n  "],[-1,"m"],[1,"M"],[0,"emorable"],[-1," ="],[1,":"],[0," req"]],"start1":20,"start2":20,"length1":27,"length2":25},{"diffs":[[0,"e: 0\n  \n"],[1,"  constructor = (options)->\n    options?= {}\n    options.maxSize?= 0\n    options.maxRecords?= 0\n    options.maxAge?= 0\n    \n    @MaxSize = maxSize\n    @MaxRecords = maxRecords\n    @MaxAge = maxAge\n  \n"],[0,"  Size: "]],"start1":103,"start2":103,"length1":16,"length2":216}]],"length":1142,"saved":false}
{"ts":1351196477706,"patch":[[{"diffs":[[0,"\n  S"],[-1,"ize: ()->\n    clearFuncs = []\n    stack = [heap]\n    bytes = 0\n    func = null\n    isChecked = (item"],[1,"et: (key, data, options"],[0,")->\n    "],[-1," "],[-1," item[\"__c\"] || false;\n    check = (item)->\n      item[\"__c\"] = true;\n    uncheck = (item)->\n      delete item[\"__c\"]\n    while(stack.length)\n      value = stack.pop()\n      do(value)->\n        if typeof value is 'string'\n          bytes += value.length * 2\n        else if typeof value is 'boolean'\n          bytes += 4\n        else if typeof value is 'number'\n          bytes += 8\n        else if typeof value is 'object' and not isChecked value\n          clearFuncs.push ->\n            uncheck value\n          for i,val of value\n            if value.hasOwnProperty i\n              stack.push val\n          check value\n    while func = clearFuncs.pop()\n      func.call()"],[1,"try memorable = new Memorable(key, data, options)\n    catch (ex)\n      console.error \"Unable to set memorable: #{ex}\"\n  \n  CalculateSize: ->\n    size = 0\n    for memorable in @heap\n      size += memorable.Size"],[0,"\n   "]],"start1":310,"start2":310,"length1":789,"length2":248},{"diffs":[[0,"urn "],[-1,"bytes"],[1,"size\n    "],[0,"\n\nmo"]],"start1":562,"start2":562,"length1":13,"length2":17}]],"length":605,"saved":false}
{"ts":1351196488173,"patch":[[{"diffs":[[0,"tch "],[-1,"("],[0,"ex"],[-1,")"],[0,"\n   "]],"start1":401,"start2":401,"length1":12,"length2":10}]],"length":603,"saved":false}
{"ts":1351196532469,"patch":[[{"diffs":[[0,"    try "],[1,"\n      "],[0,"memorabl"]],"start1":341,"start2":341,"length1":16,"length2":23},{"diffs":[[0,"emorable"],[-1,"("],[1," "],[0,"key, dat"]],"start1":373,"start2":373,"length1":17,"length2":17},{"diffs":[[0," options"],[-1,")"],[1,"\n      heap.push memorable"],[0,"\n    cat"]],"start1":392,"start2":392,"length1":17,"length2":42}]],"length":635,"saved":false}
{"ts":1351196710195,"patch":[[{"diffs":[[0,"ata, options"],[1,", callback"],[0,")->\n    try "]],"start1":325,"start2":325,"length1":24,"length2":34},{"diffs":[[0,"ex}\"\n  \n"],[1,"  Get: (key, callback)->\n  \n  \n"],[0,"  Calcul"]],"start1":498,"start2":498,"length1":16,"length2":47}]],"length":676,"saved":false}
{"ts":1351196888832,"patch":[[{"diffs":[[0," \n  "],[-1,"Get: (key, call"],[1,"# Returns error:empty if there is no valid entry\n  Get: (key, callback)->\n  \n  # Performs elseback to get data if empty\n  GetOrElse: (key, options, callback, else"],[0,"back"]],"start1":504,"start2":504,"length1":23,"length2":170}]],"length":823,"saved":false}
