// Generated by CoffeeScript 1.4.0
(function() {
  var Memorable;

  Memorable = (function() {

    Memorable.prototype.key = "";

    Memorable.prototype.data = {};

    Memorable.prototype.invalid = false;

    Memorable.prototype.size = 0;

    Memorable.prototype.expires = 0;

    Memorable.prototype.deathTime = 0;

    function Memorable(key, data, options) {
      var _ref, _ref1;
      if (typeof key === 'undefined') {
        throw "Memorable missing key element";
      }
      if (typeof data === 'undefined') {
        throw "Memorable missing data element";
      }
      if (options == null) {
        options = {};
      }
      if ((_ref = options.maxAge) == null) {
        options.maxAge = 0;
      }
      if ((_ref1 = options.deathTime) == null) {
        options.deathTime = 0;
      }
      this.key = key;
      this.data = data;
      if (options.maxAge !== 0) {
        this.expires = Date.now() + (options.maxAge * 1000);
      }
      this.deathTime = options.deathTime;
      this.size = this.calculateSize();
    }

    Memorable.prototype.isGood = function() {
      return !this.invalid && (this.expires === 0 || Date.now() < this.expires);
    };

    Memorable.prototype.isNearDeath = function() {
      return Date.now() > (this.expires - (DeathTime * 1000));
    };

    Memorable.prototype.invalidate = function() {
      return this.invalid = true;
    };

    Memorable.prototype.calculateSize = function() {
      var bytes, check, clearFuncs, func, isChecked, stack, uncheck, value;
      clearFuncs = [];
      stack = [this.data];
      bytes = 0;
      func = null;
      isChecked = function(item) {
        return item["__c"] || false;
      };
      check = function(item) {
        return item["__c"] = true;
      };
      uncheck = function(item) {
        return delete item["__c"];
      };
      while (stack.length) {
        value = stack.pop();
        (function(value) {
          var i, val;
          if (typeof value === 'string') {
            return bytes += value.length * 2;
          } else if (typeof value === 'boolean') {
            return bytes += 4;
          } else if (typeof value === 'number') {
            return bytes += 8;
          } else if (typeof value === 'object' && !isChecked(value)) {
            clearFuncs.push(function() {
              return uncheck(value);
            });
            for (i in value) {
              val = value[i];
              if (value.hasOwnProperty(i)) {
                stack.push(val);
              }
            }
            return check(value);
          }
        })(value);
      }
      while (func = clearFuncs.pop()) {
        func.call();
      }
      return bytes;
    };

    return Memorable;

  })();

  module.exports = Memorable;

}).call(this);
