// Generated by CoffeeScript 1.4.0
(function() {
  var ShortMemory;

  ShortMemory = (function() {
    var heap, memorable;

    function ShortMemory() {}

    heap = [];

    memorable = require('./memorable.js');

    ShortMemory.prototype.MaxSize = 0;

    ShortMemory.prototype.MaxRecords = 0;

    ShortMemory.prototype.MaxAge = 0;

    ShortMemory.prototype.Size = function() {
      var bytes, check, clearFuncs, func, isChecked, stack, uncheck, value;
      clearFuncs = [];
      stack = [heap];
      bytes = 0;
      func = null;
      isChecked = function(item) {
        return item["__c"] || false;
      };
      check = function(item) {
        return item["__c"] = true;
      };
      uncheck = function(item) {
        return delete item["__c"];
      };
      while (stack.length) {
        value = stack.pop();
        (function(value) {
          var i, val;
          if (typeof value === 'string') {
            return bytes += value.length * 2;
          } else if (typeof value === 'boolean') {
            return bytes += 4;
          } else if (typeof value === 'number') {
            return bytes += 8;
          } else if (typeof value === 'object' && !isChecked(value)) {
            clearFuncs.push(function() {
              return uncheck(value);
            });
            for (i in value) {
              val = value[i];
              if (value.hasOwnProperty(i)) {
                stack.push(val);
              }
            }
            return check(value);
          }
        })(value);
      }
      while (func = clearFuncs.pop()) {
        func.call();
      }
      return bytes;
    };

    return ShortMemory;

  })();

  module.exports = ShortMemory;

}).call(this);
