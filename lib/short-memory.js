// Generated by CoffeeScript 1.4.0
(function() {
  var Memorable, ShortMemory, isNode, root;

  Object.keys = Object.keys || (function() {
    var DontEnums, DontEnumsLength, hasDontEnumBug, hasOwnProperty;
    hasOwnProperty = Object.prototype.hasOwnProperty;
    hasDontEnumBug = !{
      toString: null
    }.propertyIsEnumerable("toString");
    DontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'];
    DontEnumsLength = DontEnums.length;
    return function(o) {
      var DontEnum, key, obj, result, _i, _len;
      if (typeof o !== "object" && typeof o !== "function" || o === null) {
        throw new TypeError("Object.keys called on a non-object");
      }
      result = [];
      for (key in o) {
        obj = o[key];
        if (hasOwnProperty.call(o, key)) {
          result.push(key);
        }
      }
      if (hasDontEnumBug) {
        for (_i = 0, _len = DontEnums.length; _i < _len; _i++) {
          DontEnum = DontEnums[_i];
          if (hasOwnProperty.call(o, DontEnum)) {
            result.push(DontEnum);
          }
        }
      }
      return result;
    };
  })();

  ShortMemory = (function() {

    ShortMemory.prototype.heap = {};

    ShortMemory.prototype.Memorable = Memorable;

    ShortMemory.prototype.maxSize = 0;

    ShortMemory.prototype.maxCount = 0;

    ShortMemory.prototype.maxAge = 0;

    ShortMemory.prototype.pruneTime = 5;

    ShortMemory.prototype.deathTime = 0;

    ShortMemory.prototype.debug = false;

    function ShortMemory(options) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _this;
      if (options == null) {
        options = {};
      }
      if ((_ref = options.maxSize) == null) {
        options.maxSize = 0;
      }
      if ((_ref1 = options.maxCount) == null) {
        options.maxCount = 0;
      }
      if ((_ref2 = options.maxAge) == null) {
        options.maxAge = 0;
      }
      if ((_ref3 = options.deathTime) == null) {
        options.deathTime = 0;
      }
      if ((_ref4 = options.pruneTime) == null) {
        options.pruneTime = 5;
      }
      if ((_ref5 = options.debug) == null) {
        options.debug = false;
      }
      this.maxSize = options.maxSize;
      this.maxCount = options.maxCount;
      this.maxAge = options.maxAge;
      this.debug = options.debug;
      this.pruneTime = options.pruneTime * 1000;
      this.deathTime = options.deathTime;
      _this = this;
      (function(_this) {
        return ShortMemory.prototype.prune.call(_this);
      })(_this);
    }

    ShortMemory.prototype.set = function(key, data, options, callback) {
      var memorable, _ref, _ref1;
      if (options == null) {
        options = {};
      }
      if ((_ref = options.maxAge) == null) {
        options.maxAge = this.maxAge;
      }
      if ((_ref1 = options.deathTime) == null) {
        options.deathTime = this.deathTime;
      }
      memorable = new this.Memorable(key, data, options);
      this.heap[key] = memorable;
      return callback(null, memorable.data);
    };

    ShortMemory.prototype.get = function(key, callback) {
      var _this;
      _this = this;
      return process.nextTick(function() {
        var value;
        value = _this.heap[key];
        if (typeof value === 'undefined') {
          return callback({
            type: "notfound",
            message: "Key " + key + " not found in heap."
          });
        } else {
          if (!value.isGood) {
            this.destroy(key);
            return callback({
              type: "invalid",
              message: "Key " + key + " is invalid or expired."
            });
          } else {
            return callback(null, value.data);
          }
        }
      });
    };

    ShortMemory.prototype.getOrSet = function(key, options, callback, setback) {
      var _this;
      _this = this;
      return this.get(key, function(error, value) {
        var data;
        if (error) {
          if (error.type === "notfound" || error.type === "invalid") {
            data = setback();
            return _this.set(key, data, options, callback);
          }
          return callback(error);
        } else {
          return callback(null, value);
        }
      });
    };

    ShortMemory.prototype.destroy = function(key) {
      this.debug && console.log("Destroying key " + key);
      return delete this.heap[key];
    };

    ShortMemory.prototype.prune = function() {
      var count, key, memorable, overCount, overSize, prunable, pruned, size, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _this;
      clearTimeout(this.timer);
      prunable = [];
      pruned = 0;
      _ref = this.heap;
      for (key in _ref) {
        memorable = _ref[key];
        if (!memorable.isGood()) {
          prunable.push(key);
        }
      }
      for (_i = 0, _len = prunable.length; _i < _len; _i++) {
        key = prunable[_i];
        pruned++;
        this.destroy(key);
      }
      if (this.maxCount !== 0) {
        count = Object.keys(this.heap).length;
        if (count > this.maxCount) {
          overCount = count - this.maxCount;
          prunable = Object.keys(this.heap).slice(0, overCount);
          for (_j = 0, _len1 = prunable.length; _j < _len1; _j++) {
            key = prunable[_j];
            pruned++;
            this.destroy(key);
          }
        }
      }
      if (this.maxSize !== 0) {
        size = this.calculateSize();
        if (size > this.maxSize) {
          overSize = size - this.maxSize;
          prunable = [];
          _ref1 = this.heap;
          for (key in _ref1) {
            memorable = _ref1[key];
            prunable.push(key);
            overSize -= memorable.size;
            if (overSize <= 0) {
              break;
            }
          }
          for (_k = 0, _len2 = prunable.length; _k < _len2; _k++) {
            key = prunable[_k];
            pruned++;
            this.destroy(key);
          }
        }
      }
      _this = this;
      this.timer = setTimeout(function(_this) {
        return ShortMemory.prototype.prune.call(_this);
      }, this.pruneTime, _this);
      return pruned;
    };

    ShortMemory.prototype.calculateSize = function() {
      var i, memorable, size, _ref;
      size = 0;
      _ref = this.heap;
      for (i in _ref) {
        memorable = _ref[i];
        size += memorable.size;
      }
      return size;
    };

    return ShortMemory;

  })();

  Memorable = (function() {

    Memorable.prototype.key = "";

    Memorable.prototype.data = {};

    Memorable.prototype.invalid = false;

    Memorable.prototype.size = 0;

    Memorable.prototype.expires = 0;

    Memorable.prototype.deathTime = 0;

    function Memorable(key, data, options) {
      var _ref, _ref1;
      if (typeof key === 'undefined') {
        throw "Memorable missing key element";
      }
      if (typeof data === 'undefined') {
        throw "Memorable missing data element";
      }
      if (options == null) {
        options = {};
      }
      if ((_ref = options.maxAge) == null) {
        options.maxAge = 0;
      }
      if ((_ref1 = options.deathTime) == null) {
        options.deathTime = 0;
      }
      this.key = key;
      this.data = data;
      if (options.maxAge !== 0) {
        this.expires = Date.now() + (options.maxAge * 1000);
      }
      this.deathTime = options.deathTime;
      this.size = this.calculateSize();
    }

    Memorable.prototype.isGood = function() {
      return !this.invalid && (this.expires === 0 || Date.now() < this.expires);
    };

    Memorable.prototype.isNearDeath = function() {
      return Date.now() > (this.expires - (DeathTime * 1000));
    };

    Memorable.prototype.invalidate = function() {
      return this.invalid = true;
    };

    Memorable.prototype.calculateSize = function() {
      var bytes, check, clearFuncs, func, isChecked, stack, uncheck, value;
      clearFuncs = [];
      stack = [this.data];
      bytes = 0;
      func = null;
      isChecked = function(item) {
        return item["__c"] || false;
      };
      check = function(item) {
        return item["__c"] = true;
      };
      uncheck = function(item) {
        return delete item["__c"];
      };
      while (stack.length) {
        value = stack.pop();
        (function(value) {
          var i, val;
          if (typeof value === 'string') {
            return bytes += value.length * 2;
          } else if (typeof value === 'boolean') {
            return bytes += 4;
          } else if (typeof value === 'number') {
            return bytes += 8;
          } else if (typeof value === 'object' && !isChecked(value)) {
            clearFuncs.push(function() {
              return uncheck(value);
            });
            for (i in value) {
              val = value[i];
              if (value.hasOwnProperty(i)) {
                stack.push(val);
              }
            }
            return check(value);
          }
        })(value);
      }
      while (func = clearFuncs.pop()) {
        func.call();
      }
      return bytes;
    };

    return Memorable;

  })();

  root = this;

  isNode = false;

  if (typeof module !== 'undefined' && module.exports) {
    module.exports = ShortMemory;
  }

  root.ShortMemory = ShortMemory;

  root.Memorable = Memorable;

}).call(this);
